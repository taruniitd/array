/*Given a boolean 2D array of n x m dimensions where each row is sorted. Find the 0-based index of the first row that has the maximum number of 1's.*/
#include<iostream>
#include<bits/stdc++.h>
using namespace std;

int findNextGrterElem(int arr[8], int arrSize)
{
    stack<int> stackArr;
    stackArr.push(arr[0]);
    
    for(int cur = 1; cur < arrSize; cur++)
    {
        while(stackArr.empty())
        {
            stackArr.push(arr[cur]);
            continue;
        }
        while (!stackArr.empty())
        {
            if(arr[cur] > stackArr.top())
            {
                cout << "print : " << stackArr.top() << " -> " << arr[cur] << endl;
                stackArr.pop();
            }
            else
                break;
        }
        stackArr.push(arr[cur]);
    }
    while(!stackArr.empty())
    {
        cout << "remaining : " << stackArr.top() << " -> " << -1 << endl;
        stackArr.pop();
    }
    return 0;
}

int main()
{
    int arr[] = { 13, 3, 21, 34, 13, 12, 11, 14};
    int arrSize = sizeof(arr) / sizeof(arr[0]);
    findNextGrterElem(arr, arrSize);
    return 0;
}


