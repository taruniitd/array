//https://www.geeksforgeeks.org/find-duplicates-in-on-time-and-constant-extra-space/
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> duplicates(int arr[], int arr_size)
{
    for(int i = 0; i < arr_size; i++)
        arr[i] += 1;
    
    vector<int> res;
    int count = 0;
    
    for(int i = 0; i < arr_size; i++)
    {
        int index = abs(arr[i]) > arr_size ? abs(arr[i]) / (arr_size + 1) : abs(arr[i]);
        if(index == arr_size)
        {
            count++;
            continue;
        }
        int val = arr[index];
        if(val < 0)
        {
            res.push_back(index - 1);
            arr[index] = abs(arr[index]) * (arr_size + 1);
        }
        else if(val > arr_size)
        {
            continue;
        }
        else
        {
            arr[index] = -arr[index];
        }
    }
    if(count > 1)
        res.push_back(arr_size - 1);
    if(res.size() == 0)
        res.push_back(-1);
    else
        sort(res.begin(), res.end());
    return res;
}
int main()
{
    int numRay[] = {0, 4, 3, 2, 7, 8, 2, 3, 1};
    int arr_size = sizeof(numRay) / sizeof(numRay[0]);
    
    for(int i = 0; i < arr_size; i++)
    {
        numRay[numRay[i] % arr_size] = numRay[numRay[i] % arr_size] + arr_size;
    }
    cout << "repeating elements are : " << endl;
    for(int i = 0; i < arr_size; i++)
    {
        if(numRay[i] >= arr_size * 2)
        {
            cout << i << endl;
        }
    }
    
    cout << "Use New method : " << endl;
    int numRay_1[] = {0, 4, 3, 2, 7, 8, 2, 3, 1};
    int arr_size_1 = sizeof(numRay_1) / sizeof(numRay_1[0]);
    vector<int> res = duplicates(numRay_1, arr_size_1);
    for(int i : res)
        cout << i << "  ";
    return 0;
}
